# The playbook installs and configures midPointdev

- hosts: "{{ host }}"
  become: root
  vars_files:
    - files/vars.yml
  tasks:

# Linux

  - name: misc packages
    yum:
      name:
# List any other misc linux packages you want to install here
        - wget
        - unzip
        - python3-libsemanage
      state: latest

# This adds a line to /etc/hosts you can remove this if you handle it in another way
  - name: hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ ansible_default_ipv4.address }} {{ ansible_fqdn }}"

# Opens HTTP and HTTPS in the firewall
  - firewalld: service=http permanent=true state=enabled immediate=yes
  - firewalld: service=https permanent=true state=enabled immediate=yes

# Uncomment this if you need to open any ports to ssh  
#  - name: open firewall for ssh
#    firewalld: rich_rule='rule service name="ssh" family="ipv4" source address="{{ item }}" accept' permanent=true state=enabled immediate=yes
#    with_items:
#    - 127.0.0.1/32
#    - 127.0.0.2/32

# Java
  - name: install open-jdk
    yum:
      name:
        - "{{ openjdk_package }}"
      state: present

# Apache
  - name: httpd packages
    yum:
      name:
        - httpd
        - mod_ssl
      state: latest
    tags:
    - httpd
    notify:
    - httpd service restart

# This will stop SELinux from preventing access to self signed certs    
  - name: apply new SELinux to files
    command: restorecon -iR /etc/pki/tls/

# This will stop SELinux from flagging Apache    
  - name: selinux CGI sockets
    seboolean: name=httpd_can_network_connect state=yes persistent=yes

# This command will move files/httpd.conf to the remote host and put it in the apache conf.d directory    
  - name: httpd config davenport
    template:
      src: files/httpd.conf
      dest: /etc/httpd/conf.d/midpoint.conf
    notify:
    - httpd service restart
    
  - name: httpd service
    service: name=httpd state=started enabled=true
    tags:
    - httpd

# midPoint

# This download & extract midpoint if it doesn't exist
  - name: Extract & Download midpoint
    unarchive:
      src: "{{ midpoint_url }}"
      dest: /opt/
      remote_src: yes
      creates: "/opt/midpoint-{{ midpoint_version }}"

# This will create midpoint.service file using the template
  - name: Create systemd service file from template
    template:
      src: files/midpoint.service
      dest: /etc/systemd/system/midpoint.service

# This will enable the midpoint service ensuring it automatically starts after a restart      
  - name: midpoint service
    service: name=midpoint.service state=started enabled=true
    
  handlers:
    - name: httpd service restart
      service: name=httpd state=restarted
